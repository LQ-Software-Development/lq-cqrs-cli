import { I<%= props.name %>UseCase } from './I<%= props.name %>UseCase'
import { <%= props.name %>RequestDTO } from '../../../dtos/request/<%= props.name %>RequestDTO'

export class <%= props.name %>Controller implements IController<<%= props.name %>RequestDTO> {
    constructor(private <%= props.name%>UseCase: I<%= props.name %>UseCase) {}

    async handle(request: <%= props.name %>RequestDTO): Promise<HttpResponse> {
      const result = await this.<%= props.name%>UseCase.execute(request);

      if (result.isFailure)
        return handleError(result.error);

      return ok(result.value);
    }

    private handleError(error: Error): HttpResponse {
      switch (error.name) {
        case 'NotFound':
          return notFound(error);
        default:
          return fail(error);
      }
    }

    private parseRequest(request: <%= props.name %>Request): <%= props.name %>RequestDTO {
      return request;
    }
}
