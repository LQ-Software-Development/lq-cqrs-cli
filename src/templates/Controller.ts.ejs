import {
  ApiTags,
  ApiOkResponse,
  ApiBadRequestResponse,
  ApiOperation,
} from '@nestjs/swagger';
import { Controller, <%= props.method %> } from '@nestjs/common';

import { ControllerBase } from '@/core/application/controller.base';

import { I<%= props.name %>UseCase } from './<%= props.kebabedName.toLowerCase() %>.usecase.interface';
import { <%= props.name %>RequestDto } from './dtos/<%= props.kebabedName.toLowerCase() %>.request';
import { <%= props.name %>ResponseDto } from './dtos/<%= props.kebabedName.toLowerCase() %>.response';

@ApiTags('<%= props.moduleName.toLowerCase() %>')
@Controller('<%= props.name.toLowerCase() %>')
export class <%= props.name %>Controller extends ControllerBase {
  constructor(private <%= props.name%>UseCase: I<%= props.name %>UseCase) {
    super();
  }

  @ApiOperation({ summary: '<%= props.name %>' })
  @ApiOkResponse({ type: <%= props.name %>ResponseDto })
  @ApiBadRequestResponse({ description: 'Bad Request' })
  @<%= props.method %>()
  async handle(request: <%= props.name %>RequestDto) {
    const result = await this.<%= props.name%>UseCase.execute(request);

    if (result.isFailure) return this.prepareErrorResponse(result.error);

    return result.value;
  }
}
