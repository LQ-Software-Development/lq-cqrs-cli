import { AggregateID } from '@/core/domain/entity.base';
import { Result } from '@/core/application/result';
import { <%= props.entityName %>Model } from '../../models/<%= props.kebabedName %>.model';
import { <%= props.entityName %> } from '../../domain/<%= props.kebabedName %>.domain';
import { <%= props.entityName %>Mapper } from '../../mappers/<%= props.kebabedName %>.mapper';

import { <%= props.entityName %>RepositoryInterface } from '../<%= props.kebabedName %>.repository.interface';

export class <%= props.entityName %>Repository implements <%= props.entityName %>RepositoryInterface {
  private readonly _repository: Repository<<%= props.entityName %>Model>;

  constructor() {
    this._repository = getRepository(<%= props.entityName %>);
  }

  async save(entity: <%= props.entityName %>, id: AggregateID): Promise<Result<<%= props.entityName %>>> {
    const rawEntity = <%= props.entityName %>Mapper.toPersistence(entity);

    const persistedEntity = await this._repository.save({
      ...rawEntity,
      id,
    });

    return Result.ok(<%= props.entityName %>Mapper.toDomain(persistedEntity));
  }

  async findById(id: string): Promise<<%= props.entityName %> | null> {
    const rawEntity = await this._repository.findOne(id);

    if (!rawEntity) {
      return null;
    }

    return <%= props.entityName %>Mapper.toDomain(rawEntity);
  }

  async list(): Promise<<%= props.entityName %>[]> {
    const rawEntities = await this._repository.find();

    return rawEntities.map((rawEntity) => <%= props.entityName %>Mapper.toDomain(rawEntity));
  }
}
